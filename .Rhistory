labs(y = "Variance of Top 10%-share", x = "Countries") +
scale_fill_gradient(low = viridis(1, alpha = 0.5),
high = viridis(1, alpha = 1),
na.value = "grey50",
guide = "colourbar",
aesthetics = "fill") +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10)) +
annotate("text", x = 172, y = 0.026, label = "Max (Singapore)", size = 3.2) +
coord_flip()
dev.off()
m4_re_wb <- lmer(lead_log_PM25 ~ mean_inequ + demeaned_inequ +
demeaned_income + demeaned_income_sq + demeaned_winning +
demeaned_trade + demeaned_cpi + demeaned_industrial + demeaned_pop +
mean_income + mean_income_sq + mean_winning +
mean_trade + mean_cpi + mean_industrial + mean_pop + year +
(1 | country),
data = data_descript)
m4_re_wb_co2 <- lmer(lead_log_co2 ~ mean_inequ + demeaned_inequ +
demeaned_income + demeaned_income_sq + demeaned_winning +
demeaned_trade + demeaned_cpi + demeaned_industrial + demeaned_pop +
mean_income + mean_income_sq + mean_winning +
mean_trade + mean_cpi + mean_industrial + mean_pop + year +
(1 | country),
data = data_descript)
#-------------------------------------------------------------------------------
# NO2
#-------------------------------------------------------------------------------
m4_re_wb_nox <- lmer(lead_log_nox ~ mean_inequ + demeaned_inequ +
demeaned_income + demeaned_income_sq + demeaned_winning +
demeaned_trade + demeaned_cpi + demeaned_industrial + demeaned_pop +
mean_income + mean_income_sq + mean_winning +
mean_trade + mean_cpi + mean_industrial + mean_pop + year +
(1 | country),
data = data_descript)
#-------------------------------------------------------------------------------
# SO2
#-------------------------------------------------------------------------------
m4_re_wb_so2 <- lmer(lead_log_so2 ~ mean_inequ + demeaned_inequ +
demeaned_income + demeaned_income_sq + demeaned_winning +
demeaned_trade + demeaned_cpi + demeaned_industrial + demeaned_pop +
mean_income + mean_income_sq + mean_winning +
mean_trade + mean_cpi + mean_industrial + mean_pop + year +
(1 | country),
data = data_descript)
## Table Alternative Models
texreg(list(m4_re_wb, m4_re_wb_co2, m4_re_wb_so2, m4_re_wb_nox),
stars = c(0.01, 0.05, 0.1),
caption = "Alternative Measures for Air Pollution",
label = "tab:pollutants",
caption.above = T,
custom.model.names = c("$PM_{2.5}$", "$CO_{2}$", "$SO_{2}$", "$NO_{x}$"),
fontsize = "scriptsize",
groups = list("Controls (Within)" = 9:12,
"Controls (Between)" = 13:16),
custom.coef.map = list("demeaned_inequ" = "Top 10%-share (Within)",
"mean_inequ" = "Top 10%-share (Between)",
"demeaned_income" = "log(GDP per capita) (Within)",
"demeaned_income_sq" = "log(GDP per capita)$^2$ (Within)",
"mean_income" = "log(GDP per capita) (Between)",
"mean_income_sq" = "log(GDP per capita)$^2$ (Between)",
"demeaned_winning" = "Democracy (Within)",
"mean_winning" = "Democracy (Between)",
"demeaned_trade" = "Trade openness",
"demeaned_cpi" = "Corruption",
"demeaned_industrial" = "Industry (% GDP)",
"demeaned_pop" = "log(Pop. density)",
"mean_trade" = "Trade openness.",
"mean_cpi" = "Corruption.",
"mean_industrial" = "Industry (% GDP).",
"mean_pop" = "log(Pop. density).",
"year" = "Year", "(Intercept)" = "Intercept"),
custom.gof.names = c("AIC",
"BIC",
"Log Likelihood",
"N",
"N(Countries)",
"Var: Countries (Intercept)",
"Var: Residual"))
## clean environment
rm(list = ls())
# Define which packages needed for analyses
p_needed <-
c("knitr",
"dplyr",
"stargazer",
"car",
"ggplot2",
"viridis",
"rsample",
"MASS",
"lme4",
"devtools",
"haven",
"modelsummary",
"ggmap",
"maps",
"data.table",
"texreg",
"fastDummies",
"margins")
# Check which packages are already installed on your computer
packages <- rownames(installed.packages())
# Check which packages are not installed
p_to_install <- p_needed[!(p_needed %in% packages)]
if (length(p_to_install) > 0) {
utils::install.packages(p_to_install)
}
sapply(p_needed, require, character.only = TRUE)
# Set an option for the final document that can be produced from the .Rmd file.
knitr::opts_chunk$set(echo = TRUE)
## For replicability: session information
session_info <- print(sessionInfo())
datasummary(formula = (`PM$_2.5$ (orig. scale)` = PM25_pop_weighed) + (`PM$_2.5$ (log scale)` = lead_log_PM25) +
(`Top 10%-share` = top10) + (`Top 1%-share` = top1) + (`Bottom 50%-share` = bottom50) +
(`T10/B50-ratio` = t10b50ratio) + (`log(GDP per capita)$^2$` = `2_gdp_pc_log`) +
(`W/S-ratio` = W4) + (`Trade openness` = trade_openness) + (`Corruption`= cpi) +
(`Industry (% GDP)` = industry_share) + (`log(Pop. density)`= pop_dens_log) + (`Year`= year) +
(`Polyarchy`= v2x_polyarchy)  + (`GDP per cap. growth` = gdp_pc_growth) +
(`GDP per cap/km$^2$`= gdp_pc_sqkm) + (`Average temp.`= Annual_temp) +
(`Precip. variab.` = precip_var) + (`Urban pop. (%)` = urban_pop) +
(`CO$_2$ (orig. scale)` = co2) + (`CO$_2$ (log scale)` = log_co2) +
(`SO$_2$ (orig. scale)` = so2) + (`SO$_2$ (log scale)` = log_so2) +
(`NO$_x$ (orig. scale)` = nox) + (`NO$_x$ (log scale)` = log_nox)
~ N + Mean + SD + Min + Median + Max,
data = data_descript,
output = "latex")
#-------------------------------------------------------------------------------
## Load the data
#-------------------------------------------------------------------------------
load("data/data.RData")
load("data/data_s.RData")
## group countries
countries_low_income <- c("Afghanistan", "Burkina Faso", "Burundi", "Central African Republic",
"Chad", "Democratic Republic of the Congo", "Eritrea", "Ethiopia",
"Gambia", "Guinea", "Guinea-Bissau", "North Korea", "Liberia", "Madagascar", "Malawi",
"Mali", "Mozambique", "Niger", "Rwanda", "Sierra Leone", "Somalia",
"South Sudan", "Sudan", "Syria", "Togo", "Uganda", "Yemen", "Zambia")
countries_low_mid_income <- c("Algeria", "Angola", "Bangladesh", "Benin", "Bhutan", "Bolivia",
"Benin", "Cape Verde", "Cambodia", "Cameroon", "Comoros",
"Republic of Congo", "Cote d'Ivoire", "Djibouti", "Egypt", "El Salvador",
"Swaziland", "Ghana", "Haiti", "Honduras", "India", "Indonesia",
"Iran", "Kenya", "Kiribati", "Kyrgyztan", "Laos", "Lebanon",
"Lesotho", "Mauritania", "Micronesia", "Mongolia", "Morocco",
"Myanmar", "Nepal", "Nicaragua", "Nigeria", "Pakistan",
"Papua New Guinea", "Philippines", "Samoa", "Sao Tome and Principe",
"Senegal", "Solomon Islands", "Sri Lanka", "Tajikistan", "Tanzania",
"Timor-Leste", "Tunisia", "Ukraine", "Uzbekistan", "Vanuatu",
"Vietnam", "Palestina", "Zimbabwe")
countries_up_mid_income <- c("Albania", "Armenia", "American Samoa", "Argentina", "Azerbaijan",
"Belarus", "Belize", "Bosnia and Herzegovina", "Botswana",
"Brazil", "Bulgaria", "China", "Colombia", "Costa Rica", "Cuba",
"Dominica", "Dominican Republic", "Ecuador", "Equatorial Guinea",
"Fiji", "Gabon", "Georgia", "Grenada", "Guatemala", "Guyana",
"Iraq", "Jamaica", "Jordan", "Kazakhstan", "Kosovo", "Libya",
"Malaysia", "Maldives", "Marshall Islands", "Mauritius", "Mexico",
"Moldova", "Montenegro", "Namibia", "North Macedonia", "Palau",
"Paraguay", "Peru", "Russia", "Serbia", "South Africa", "St. Lucia",
"Saint Vincent and the Grenadines", "Suriname", "Thailand", "Tonga",
"Turkey", "Turkmenistan", "Tuvalu", "Venezuela")
countries_high_income <- c("Andorra", "Antigua and Barbuda", "Aruba", "Australia", "Austria",
"Bahamas", "Bahrain", "Barbados", "Belgium", "Bermuda", "British Virgin Islands",
"Brunei", "Canada", "Cayman Islands", "Channel Islands", "Chile", "Croatia",
"Curacao", "Cyprus", "Czech Republic", "Denmark", "Estonia", "Faroe Islands", "Finland",
"France", "French Polynesia", "Germany", "Gibraltar", "Greece", "Greenland",
"Guam", "Hong Kong", "Hungary", "Iceland", "Ireland", "Isle of Man", "Israel",
"Italy", "Japan", "Korea, Rep.", "Kuwait", "Latvia", "Liechtenstein",
"Lithuania", "Luxembourg", "Macao", "Malta", "Monaco", "Nauru", "Netherlands",
"New Caledonia", "New Zealand", "Northern Mariana Islands", "Norway", "Oman",
"Panama", "Poland", "Portugal", "Puerto Rico", "Qatar", "Romania", "San Marino",
"Saudi Arabia", "Seychelles", "Singapore", "Sint Marteen", "Slovakia", "Slovenia",
"Spain", "Saint Kitts and Nevis", "Saint Martin", "Sweden", "Switzerland",
"Trinidad and Tobago", "Turks and Caicos Islands", "United Arab Emirates",
"United Kingdom", "United States", "Uruguay", "Virgin Islands U.S.")
## load world map data
world <- map_data("world")
world$region[which(world$region == "USA")] <- "United States"
world$region[which(world$region == "UK")] <- "United Kingdom"
world$region[which(world$region == "Ivory Coast")] <- "Cote d'Ivoire"
#-------------------------------------------------------------------------------
## Get data set that corresponds to that used in regressions
#-------------------------------------------------------------------------------
data_descript <- data[which(!is.na(data$cpi) &
!is.na(data$trade_openness) &
!is.na(data$pop_dens_log) &
!is.na(data$demeaned_winning) &
!is.na(data$industry_share) &
!is.na(data$top10)),]
datasummary(formula = (`PM$_2.5$ (orig. scale)` = PM25_pop_weighed) + (`PM$_2.5$ (log scale)` = lead_log_PM25) +
(`Top 10%-share` = top10) + (`Top 1%-share` = top1) + (`Bottom 50%-share` = bottom50) +
(`T10/B50-ratio` = t10b50ratio) + (`log(GDP per capita)$^2$` = `2_gdp_pc_log`) +
(`W/S-ratio` = W4) + (`Trade openness` = trade_openness) + (`Corruption`= cpi) +
(`Industry (% GDP)` = industry_share) + (`log(Pop. density)`= pop_dens_log) + (`Year`= year) +
(`Polyarchy`= v2x_polyarchy)  + (`GDP per cap. growth` = gdp_pc_growth) +
(`GDP per cap/km$^2$`= gdp_pc_sqkm) + (`Average temp.`= Annual_temp) +
(`Precip. variab.` = precip_var) + (`Urban pop. (%)` = urban_pop) +
(`CO$_2$ (orig. scale)` = co2) + (`CO$_2$ (log scale)` = log_co2) +
(`SO$_2$ (orig. scale)` = so2) + (`SO$_2$ (log scale)` = log_so2) +
(`NO$_x$ (orig. scale)` = nox) + (`NO$_x$ (log scale)` = log_nox)
~ N + Mean + SD + Min + Median + Max,
data = data_descript,
output = "latex")
## clean environment
rm(list = ls())
# Define which packages needed for analyses
p_needed <-
c("knitr",
"dplyr",
"stargazer",
"car",
"ggplot2",
"viridis",
"rsample",
"MASS",
"lme4",
"devtools",
"haven",
"modelsummary",
"ggmap",
"maps",
"data.table",
"texreg",
"fastDummies",
"margins")
# Check which packages are already installed on your computer
packages <- rownames(installed.packages())
# Check which packages are not installed
p_to_install <- p_needed[!(p_needed %in% packages)]
if (length(p_to_install) > 0) {
utils::install.packages(p_to_install)
}
sapply(p_needed, require, character.only = TRUE)
# Set an option for the final document that can be produced from the .Rmd file.
knitr::opts_chunk$set(echo = TRUE)
## For replicability: session information
session_info <- print(sessionInfo())
#-------------------------------------------------------------------------------
## Load the data
#-------------------------------------------------------------------------------
load("data/data.RData")
load("data/data_s.RData")
## group countries
countries_low_income <- c("Afghanistan", "Burkina Faso", "Burundi", "Central African Republic",
"Chad", "Democratic Republic of the Congo", "Eritrea", "Ethiopia",
"Gambia", "Guinea", "Guinea-Bissau", "North Korea", "Liberia", "Madagascar", "Malawi",
"Mali", "Mozambique", "Niger", "Rwanda", "Sierra Leone", "Somalia",
"South Sudan", "Sudan", "Syria", "Togo", "Uganda", "Yemen", "Zambia")
countries_low_mid_income <- c("Algeria", "Angola", "Bangladesh", "Benin", "Bhutan", "Bolivia",
"Benin", "Cape Verde", "Cambodia", "Cameroon", "Comoros",
"Republic of Congo", "Cote d'Ivoire", "Djibouti", "Egypt", "El Salvador",
"Swaziland", "Ghana", "Haiti", "Honduras", "India", "Indonesia",
"Iran", "Kenya", "Kiribati", "Kyrgyztan", "Laos", "Lebanon",
"Lesotho", "Mauritania", "Micronesia", "Mongolia", "Morocco",
"Myanmar", "Nepal", "Nicaragua", "Nigeria", "Pakistan",
"Papua New Guinea", "Philippines", "Samoa", "Sao Tome and Principe",
"Senegal", "Solomon Islands", "Sri Lanka", "Tajikistan", "Tanzania",
"Timor-Leste", "Tunisia", "Ukraine", "Uzbekistan", "Vanuatu",
"Vietnam", "Palestina", "Zimbabwe")
countries_up_mid_income <- c("Albania", "Armenia", "American Samoa", "Argentina", "Azerbaijan",
"Belarus", "Belize", "Bosnia and Herzegovina", "Botswana",
"Brazil", "Bulgaria", "China", "Colombia", "Costa Rica", "Cuba",
"Dominica", "Dominican Republic", "Ecuador", "Equatorial Guinea",
"Fiji", "Gabon", "Georgia", "Grenada", "Guatemala", "Guyana",
"Iraq", "Jamaica", "Jordan", "Kazakhstan", "Kosovo", "Libya",
"Malaysia", "Maldives", "Marshall Islands", "Mauritius", "Mexico",
"Moldova", "Montenegro", "Namibia", "North Macedonia", "Palau",
"Paraguay", "Peru", "Russia", "Serbia", "South Africa", "St. Lucia",
"Saint Vincent and the Grenadines", "Suriname", "Thailand", "Tonga",
"Turkey", "Turkmenistan", "Tuvalu", "Venezuela")
countries_high_income <- c("Andorra", "Antigua and Barbuda", "Aruba", "Australia", "Austria",
"Bahamas", "Bahrain", "Barbados", "Belgium", "Bermuda", "British Virgin Islands",
"Brunei", "Canada", "Cayman Islands", "Channel Islands", "Chile", "Croatia",
"Curacao", "Cyprus", "Czech Republic", "Denmark", "Estonia", "Faroe Islands", "Finland",
"France", "French Polynesia", "Germany", "Gibraltar", "Greece", "Greenland",
"Guam", "Hong Kong", "Hungary", "Iceland", "Ireland", "Isle of Man", "Israel",
"Italy", "Japan", "Korea, Rep.", "Kuwait", "Latvia", "Liechtenstein",
"Lithuania", "Luxembourg", "Macao", "Malta", "Monaco", "Nauru", "Netherlands",
"New Caledonia", "New Zealand", "Northern Mariana Islands", "Norway", "Oman",
"Panama", "Poland", "Portugal", "Puerto Rico", "Qatar", "Romania", "San Marino",
"Saudi Arabia", "Seychelles", "Singapore", "Sint Marteen", "Slovakia", "Slovenia",
"Spain", "Saint Kitts and Nevis", "Saint Martin", "Sweden", "Switzerland",
"Trinidad and Tobago", "Turks and Caicos Islands", "United Arab Emirates",
"United Kingdom", "United States", "Uruguay", "Virgin Islands U.S.")
## load world map data
world <- map_data("world")
world$region[which(world$region == "USA")] <- "United States"
world$region[which(world$region == "UK")] <- "United Kingdom"
world$region[which(world$region == "Ivory Coast")] <- "Cote d'Ivoire"
#-------------------------------------------------------------------------------
## Get data set that corresponds to that used in regressions
#-------------------------------------------------------------------------------
data_descript <- data[which(!is.na(data$cpi) &
!is.na(data$trade_openness) &
!is.na(data$pop_dens_log) &
!is.na(data$demeaned_winning) &
!is.na(data$industry_share) &
!is.na(data$top10)),]
#-------------------------------------------------------------------------------
## Summary stats
#-------------------------------------------------------------------------------
# options("modelsummary_format_numeric_latex" = "plain")
#
# datasummary(formula = (`PM$_2.5$ (orig. scale)` = PM25_pop_weighed) + (`PM$_2.5$ (log scale)` = lead_log_PM25) +
#                       (`Top 10%-share` = top10) + (`Top 1%-share` = top1) + (`Bottom 50%-share` = bottom50) +
#                       (`T10/B50-ratio` = t10b50ratio) + (`log(GDP per capita)$^2$` = `2_gdp_pc_log`) +
#                       (`W/S-ratio` = W4) + (`Trade openness` = trade_openness) + (`Corruption`= cpi) +
#                       (`Industry (% GDP)` = industry_share) + (`log(Pop. density)`= pop_dens_log) + (`Year`= year) +
#                       (`Polyarchy`= v2x_polyarchy)  + (`GDP per cap. growth` = gdp_pc_growth) +
#                       (`GDP per cap/km$^2$`= gdp_pc_sqkm) + (`Average temp.`= Annual_temp) +
#                       (`Precip. variab.` = precip_var) + (`Urban pop. (%)` = urban_pop) +
#                       (`CO$_2$ (orig. scale)` = co2) + (`CO$_2$ (log scale)` = log_co2) +
#                       (`SO$_2$ (orig. scale)` = so2) + (`SO$_2$ (log scale)` = log_so2) +
#                       (`NO$_x$ (orig. scale)` = nox) + (`NO$_x$ (log scale)` = log_nox)
#                       ~ N + Mean + SD + Min + Median + Max,
#             data = data_descript,
#             output = "latex")
#-------------------------------------------------------------------------------
## Differentiate inequality increasing / decreasing countries over time
#-------------------------------------------------------------------------------
## create lead variable
data_trend <- data %>%
group_by(country) %>%
arrange(year)%>%
mutate(lead_top10 = dplyr::lead(top10),
lead_PM25 = dplyr::lead(PM25_pop_weighed))
## name columns
data_trend <- data_trend[,c("country", "year", "top10", "lead_top10",
"PM25_pop_weighed", "lead_PM25")]
## add inequality trend column
data_trend$trend_ineq <- NA
## get variable that indicates increase vs. decrease in t+1 compared to t
for(i in 1:nrow(data_trend)){
data_trend$trend_ineq[i] <- ifelse((!is.na(data_trend$lead_top10[i]) & !is.na(data_trend$top10[i])),    # if both top10 and lead top10 not NA
(data_trend$lead_top10[i] - data_trend$top10[i]), NA)                # insert diff between them
}
## get overall trend (more increasing vs. more decreasing years)
summary_trend_ineq <- data_trend %>%
group_by(country) %>%
summarize(sum_trend_ineq = ifelse(all(is.na(trend_ineq)), NA, sum(trend_ineq, na.rm = TRUE)),
var_trend_ineq = ifelse(all(is.na(trend_ineq)), NA, var(trend_ineq, na.rm = TRUE)))
## colnames
colnames(summary_trend_ineq)[1:3] <- c("country", "trend_ineq", "var_trend_ineq")
## combine
data <- left_join(data, summary_trend_ineq, by = "country")
summary(data$trend_ineq)
summary(data$var_trend_ineq)
## clean up
remove(data_trend)
#-------------------------------------------------------------------------------
# Plot trend variable
#-------------------------------------------------------------------------------
min_diff <- round(min(data$trend_ineq, na.rm = TRUE), digits = 2)
max_diff <- round(max(data$trend_ineq, na.rm = TRUE), digits = 2)
pdf("plots/Trend_inequality.pdf")
ggplot(data[which(!is.na(data$trend_ineq)),],
aes(x = reorder(country, trend_ineq), y = trend_ineq, fill = trend_ineq >= 0)) +
theme_classic() +
geom_bar(stat = "identity") +
labs(y = "Change in Top 10%-share", x = "Countries") +
scale_fill_manual(name = NULL,
breaks = c("TRUE", "FALSE"),
labels = c("Increase", "Decrease"),
values = c(viridis(3)[2],
viridis(3)[1])) +
theme(axis.text.x = element_blank(),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank(),
axis.title = element_text(size = 12),
legend.position = "bottom",
legend.text = element_text(size = 10)) +
annotate("text", x = 168, y = 3.7, label = "Max (India) \n+0.17", size = 3.2) +
annotate("text", x = 10, y = -4, label = "Min (Maldives) \n-0.18", size = 3.2) +
coord_flip()
dev.off()
#-------------------------------------------------------------------------------
# Plot variation
#-------------------------------------------------------------------------------
pdf("plots/Trend_inequality_var.pdf")
ggplot(data[which(!is.na(data$var_trend_ineq)),],
aes(x = reorder(country, var_trend_ineq), y = var_trend_ineq, fill = var_trend_ineq)) +
theme_classic() +
geom_bar(stat = "identity") +
labs(y = "Variance of Top 10%-share", x = "Countries") +
scale_fill_gradient(low = viridis(1, alpha = 0.5),
high = viridis(1, alpha = 1),
na.value = "grey50",
guide = "colourbar",
aesthetics = "fill") +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10)) +
annotate("text", x = 172, y = 0.026, label = "Max (Singapore)", size = 3.2) +
coord_flip()
dev.off()
#-------------------------------------------------------------------------------
# Robustness - Change Inequality Measure
#-------------------------------------------------------------------------------
m1_gini <- lm(lead_log_PM25 ~ gini +
demeaned_income + demeaned_income_sq + demeaned_winning +
demeaned_trade + demeaned_cpi + demeaned_industrial + demeaned_pop +
mean_income + mean_income_sq + mean_winning +
mean_trade + mean_cpi + mean_industrial + mean_pop + year +
as.factor(country),
data = data)
stargazer(m1_gini, type = "text", omit = c(country, year))
stargazer(m1_gini, type = "text", omit = c("country", "year"))
m1_gini_alt <- lmer(lead_log_PM25 ~ gini +
demeaned_income + demeaned_income_sq + demeaned_winning +
demeaned_trade + demeaned_cpi + demeaned_industrial + demeaned_pop +
mean_income + mean_income_sq + mean_winning +
mean_trade + mean_cpi + mean_industrial + mean_pop + year +
(1  | country),
data = data)
stargazer(m1_gini, m1_gini_alt, type = "text", omit = c("country", "year"))
## lag and lead Top 10%
data_descript <- data_descript %>%
group_by(country) %>%
arrange(year)%>%
mutate(lag_top_10 = dplyr::lag(top10),  ## lag one year
lead_top_10 = dplyr::lead(top10) ## lead one year
)
## build moving average
data_descript$mov_av_top10 <- rowMeans(data_descript[,c("lag_top_10",
"top10",
"lead_top_10")])
## calculate group means (country means)
means_inequ_mov <- aggregate(data_descript$mov_av_top10,
by = list(data_descript$country),
FUN = mean, na.rm = T)
means_inequ_mov[which(means_inequ_mov$x == "NaN"),] <- NA
## rename
names(means_inequ_mov) <- c("country", "mean")
## put them back into the data frame
data_descript$mean_inequ_mov <- means_inequ_mov$mean[match(data_descript$country, means_inequ_mov$country)]
## calculate de-meaned variable:
data_descript$demeaned_inequ_mov <- data_descript$mov_av_top10 - data_descript$mean_inequ_mov
## Moving average
m1_mov_top10 <- lmer(lead_log_PM25 ~ mean_inequ_mov + demeaned_inequ_mov +
demeaned_income + demeaned_income_sq + demeaned_winning +
demeaned_trade + demeaned_cpi + demeaned_industrial + demeaned_pop +
mean_income + mean_income_sq + mean_winning +
mean_trade + mean_cpi + mean_industrial + mean_pop + year +
(1  | country),
data = data_descript)
## Top 1%
m1_t1 <- lmer(lead_log_PM25 ~ mean_inequ_t1 + demeaned_inequ_t1 +
demeaned_income + demeaned_income_sq + demeaned_winning +
demeaned_trade + demeaned_cpi + demeaned_industrial + demeaned_pop +
mean_income + mean_income_sq + mean_winning +
mean_trade + mean_cpi + mean_industrial + mean_pop + year +
(1  | country),
data = data)
## Bottom 50%
m1_b50 <- lmer(lead_log_PM25 ~ mean_inequ_b50 + demeaned_inequ_b50 +
demeaned_income + demeaned_income_sq + demeaned_winning +
demeaned_trade + demeaned_cpi + demeaned_industrial + demeaned_pop +
mean_income + mean_income_sq + mean_winning +
mean_trade + mean_cpi + mean_industrial + mean_pop + year +
(1  | country),
data = data)
## Ration Top10/Bottom50
m1_t10b50 <- lmer(lead_log_PM25 ~ mean_inequ_t10b50 + demeaned_inequ_t10b50 +
demeaned_income + demeaned_income_sq + demeaned_winning +
demeaned_trade + demeaned_cpi + demeaned_industrial + demeaned_pop +
mean_income + mean_income_sq + mean_winning +
mean_trade + mean_cpi + mean_industrial + mean_pop + year +
(1  | country),
data = data)
## Top 10% wealth
m1_wealth <- lmer(lead_log_PM25 ~ mean_wealth + demeaned_wealth +
demeaned_income + demeaned_income_sq + demeaned_winning +
demeaned_trade + demeaned_cpi + demeaned_industrial + demeaned_pop +
mean_income + mean_income_sq + mean_winning +
mean_trade + mean_cpi + mean_industrial + mean_pop + year +
(1  | country),
data = data)
## Table Main
texreg(list(m1_gini_alt, m1_mov_top10, m1_t1, m1_b50, m1_t10b50, m1_wealth),
stars = c(0.01, 0.05, 0.1),
custom.header = list("log(Exposure to $PM_{2.5}$)" = 1:6),
caption = "Alternative Measures for Economic Inequality",
label = "tab:operatinequal",
caption.above = T,
custom.model.names = c("Gini", "Mov. average Top 10%", "Top 1%", "Bottom 50%", "T10/B50", "Wealth Top 10%"),
fontsize = "scriptsize",
custom.coef.map = list("gini"= "Economic inequ. (Between)",
"demeaned_inequ_mov" = "Economic inequ. (Within)",
"demeaned_inequ_t1" = "Economic inequ. (Within)",
"demeaned_inequ_b50" = "Economic inequ. (Within)",
"demeaned_inequ_t10b50" = "Economic inequ. (Within)",
"demeaned_wealth" = "Economic inequ. (Within)",
"mean_inequ_mov" = "Economic inequ. (Between)",
"mean_inequ_t1"= "Economic inequ. (Between)",
"mean_inequ_b50"= "Economic inequ. (Between)",
"mean_inequ_t10b50"= "Economic inequ. (Between)",
"mean_wealth" = "Economic inequ. (Between)",
"(Intercept)" = "Intercept"),
custom.gof.rows = list("Controls (Within)" = c("\\ding{51}", "\\ding{51}", "\\ding{51}", "\\ding{51}", "\\ding{51}", "\\ding{51}"),
"Controls (Between)" = c("\\ding{51}", "\\ding{51}", "\\ding{51}", "\\ding{51}", "\\ding{51}", "\\ding{51}")),
omit.coef = c("country", "W4", "trade_openness","cpi", "industry_share", "pop_dens_log",
"demeaned_income", "demeaned_income_sq", "demeaned_cpi", "demeaned_trade",
"demeaned_industrial", "demeaned_pop", "demeaned_winning", "mean_income",
"mean_income_sq", "mean_trade", "mean_cpi", "mean_industrial", "mean_pop",
"year"))
