legend.position = "bottom",
legend.text = element_text(size = 10)) +
# annotate("text", x = 168, y = 3.7, label = "Max (India) \n+0.17", size = 3.2) +
# annotate("text", x = 10, y = -4, label = "Min (Maldives) \n-0.18", size = 3.2) +
coord_flip()
ggplot(data_drop,
aes(x = reorder(country, top_10_b), y = top_10_b)) +
theme_classic() +
geom_point(stat = "identity") +
labs(y = "Estimate Top 10%-share (Between)", x = "Countries") +
# scale_fill_manual(name = NULL,
#                   breaks = c("TRUE", "FALSE"),
#                   labels = c("Increase", "Decrease"),
#                   values = c(viridis(3)[2],
#                              viridis(3)[1])) +
theme(axis.text.x = element_blank(),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank(),
axis.title = element_text(size = 12),
legend.position = "bottom",
legend.text = element_text(size = 10)) +
# annotate("text", x = 168, y = 3.7, label = "Max (India) \n+0.17", size = 3.2) +
# annotate("text", x = 10, y = -4, label = "Min (Maldives) \n-0.18", size = 3.2) +
coord_flip()
ggplot(data_drop,
aes(x = reorder(country, top_10_w), y = top_10_w)) +
theme_classic() +
geom_point(stat = "identity") +
labs(y = "Estimate Top 10%-share (Within)", x = "Countries") +
# scale_fill_manual(name = NULL,
#                   breaks = c("TRUE", "FALSE"),
#                   labels = c("Increase", "Decrease"),
#                   values = c(viridis(3)[2],
#                              viridis(3)[1])) +
theme(axis.text.x = element_blank(),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank(),
axis.title = element_text(size = 12),
legend.position = "bottom",
legend.text = element_text(size = 10)) +
# annotate("text", x = 168, y = 3.7, label = "Max (India) \n+0.17", size = 3.2) +
# annotate("text", x = 10, y = -4, label = "Min (Maldives) \n-0.18", size = 3.2) +
coord_flip()
ggplot(data_drop,
aes(x = reorder(country, top_10_w), y = top_10_w)) +
theme_classic() +
geom_point(stat = "identity") +
labs(y = "Estimate Top 10%-share (Within)", x = "Countries") +
# scale_fill_manual(name = NULL,
#                   breaks = c("TRUE", "FALSE"),
#                   labels = c("Increase", "Decrease"),
#                   values = c(viridis(3)[2],
#                              viridis(3)[1])) +
theme(axis.text.x = element_blank(),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank(),
axis.title = element_text(size = 12),
legend.position = "bottom",
legend.text = element_text(size = 10)) +
# annotate("text", x = 168, y = 3.7, label = "Max (India) \n+0.17", size = 3.2) +
# annotate("text", x = 10, y = -4, label = "Min (Maldives) \n-0.18", size = 3.2) +
coord_flip()
# Create the plot
p <- ggplot(data_drop, aes(x = top_10_b, y = factor(country))) +
geom_point(aes(color = significance), size = 3) +
geom_errorbarh(aes(xmin = ci_low_b, xmax = ci_up_b), height = 0.1) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("red", "blue")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_minimal()
print(b)
print(p)
print(p)
data_drop$significance_b <- NA
data_drop$significance_b <- FALSE
data_drop$significance_b <- ifelse(data_drop$ci_low_b > 0 & data_drop$ci_up_b < 0|
data_drop$ci_low_b < 0 & data_drop$ci_up_b > 0,
FALSE, TRUE)
data_drop$significance_w <- ifelse(data_drop$ci_low_w > 0 & data_drop$ci_up_w < 0|
data_drop$ci_low_w < 0 & data_drop$ci_up_w > 0,
FALSE, TRUE)
# Create the plot
p <- ggplot(data_drop, aes(x = top_10_b, y = factor(country))) +
geom_point(aes(color = significance_b), size = 3) +
geom_errorbarh(aes(xmin = ci_low_b, xmax = ci_up_b), height = 0.1) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("red", "blue")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_minimal()
print(p)
p_w <- ggplot(data_drop, aes(x = top_10_w, y = factor(country))) +
geom_point(aes(color = significance_w), size = 3) +
geom_errorbarh(aes(xmin = ci_low_w, xmax = ci_up_w), height = 0.1) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("red", "blue")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_minimal()
print(p_w)
print(p_w)
# Sort the data frame by coefficient
data_drop <- data_drop[order(data_drop$top_10_w), ]
# Create the plot
p_w <- ggplot(data_drop, aes(x = top_10_w, y = factor(country))) +
geom_point(aes(color = significance_w), size = 3) +
geom_errorbarh(aes(xmin = ci_low_w, xmax = ci_up_w), height = 0.1) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("red", "blue")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_minimal()
print(p_w)
# Create the plot
ggplot(data_drop, aes(x = top_10_b, y = factor(country))) +
geom_point(aes(color = significance_b), size = 3) +
geom_errorbarh(aes(xmin = ci_low_b, xmax = ci_up_b), height = 0.1) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("red", "blue")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
# Create the plot
ggplot(data_drop, aes(x = top_10_b, y = factor(country))) +
geom_point(aes(color = significance_b), size = 3) +
geom_errorbarh(aes(xmin = ci_low_b, xmax = ci_up_b), height = 0.1) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("darkgrey", "blue")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
# Create the plot
ggplot(data_drop, aes(x = top_10_b, y = factor(country))) +
geom_point(aes(color = significance_b), size = 3) +
geom_errorbarh(aes(xmin = ci_low_b, xmax = ci_up_b), height = 0.1) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("darkgrey", "blue")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
# Create the plot
ggplot(data_drop, aes(x = top_10_b, y = factor(country))) +
geom_point(aes(color = significance_b), size = 3) +
geom_errorbarh(aes(xmin = ci_low_b, xmax = ci_up_b), height = 0.5) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("darkgrey", "blue")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
#-------------------------------------------------------------------------------
# Plot
#-------------------------------------------------------------------------------
# Sort the data frame by coefficient
data_drop <- data_drop[order(data_drop$top_10_b), ]
# Create the plot
ggplot(data_drop, aes(x = top_10_b, y = factor(country))) +
geom_point(aes(color = significance_b), size = 3) +
geom_errorbarh(aes(xmin = ci_low_b, xmax = ci_up_b), height = 0.5) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("darkgrey", "blue")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
#-------------------------------------------------------------------------------
# Plot
#-------------------------------------------------------------------------------
# Sort the data frame by coefficient
data_drop$country <- factor(data_drop$country, levels = data_drop$country[order(data_drop$top_10_b, decreasing = TRUE)])
ggplot(data_drop, aes(x = top_10_b, y = factor(country))) +
geom_point(aes(color = significance_b), size = 3) +
geom_errorbarh(aes(xmin = ci_low_b, xmax = ci_up_b), height = 0.5) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("darkgrey", "blue")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
# Create the plot
ggplot(data_drop, aes(x = top_10_b, y = factor(country))) +
geom_point(aes(color = significance_b), size = 2) +
geom_errorbarh(aes(xmin = ci_low_b, xmax = ci_up_b), height = 0.5) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("darkgrey", "blue")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
pdf("plots/Drop_country_between.pdf")
ggplot(data_drop, aes(x = top_10_b, y = factor(country))) +
geom_point(aes(color = significance_b), size = 2) +
geom_errorbarh(aes(xmin = ci_low_b, xmax = ci_up_b), height = 0.5) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("darkgrey", "blue")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
dev.off()
pdf("plots/Drop_country_between.pdf")
ggplot(data_drop, aes(x = top_10_b, y = factor(country))) +
geom_point(aes(color = significance_b), size = 1) +
geom_errorbarh(aes(xmin = ci_low_b, xmax = ci_up_b), height = 0.2) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("darkgrey", "blue")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
dev.off()
ggplot(data_drop, aes(x = top_10_b, y = factor(country))) +
geom_point(aes(color = significance_b), size = 1) +
geom_errorbarh(aes(xmin = ci_low_b, xmax = ci_up_b), height = 0.2, color = "grey") +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("darkgrey", "blue")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
ggplot(data_drop, aes(x = top_10_b, y = factor(country))) +
geom_point(aes(color = significance_b), size = 1) +
geom_errorbarh(aes(xmin = ci_low_b, xmax = ci_up_b), height = 0.2, color = "grey") +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("darkgrey", "blue")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
pdf("plots/Drop_country_between.pdf")
ggplot(data_drop, aes(x = top_10_b, y = factor(country))) +
geom_point(aes(color = significance_b), size = 1) +
geom_errorbarh(aes(xmin = ci_low_b, xmax = ci_up_b), height = 0.2, color = "grey") +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("darkgrey", "blue")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
dev.off()
pdf("plots/Drop_country_between.pdf")
ggplot(data_drop, aes(x = top_10_b, y = factor(country))) +
geom_errorbarh(aes(xmin = ci_low_b, xmax = ci_up_b), height = 0.2, color = "grey") +
geom_point(aes(color = significance_b), size = 1) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("darkgrey", "blue")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
dev.off()
data_drop$country <- factor(data_drop$country, levels = data_drop$country[order(data_drop$top_10_w, decreasing = TRUE)])
# Create the plot
ggplot(data_drop, aes(x = top_10_w, y = factor(country))) +
geom_point(aes(color = significance_w), size = 1) +
geom_errorbarh(aes(xmin = ci_low_w, xmax = ci_up_w), height = 0.2, color = viridis(3, alpha = 0.5)[2]) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("darkgrey", viridis(3)[2])) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
ggplot(data_drop, aes(x = top_10_w, y = factor(country))) +
geom_point(aes(color = significance_w), size = 1) +
geom_errorbarh(aes(xmin = ci_low_w, xmax = ci_up_w), height = 0.2, color = viridis(3, alpha = 0.5)[1]) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("darkgrey", viridis(3)[1])) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
ggplot(data_drop, aes(x = top_10_w, y = factor(country))) +
geom_point(aes(color = significance_w), size = 1) +
geom_errorbarh(aes(xmin = ci_low_w, xmax = ci_up_w), height = 0.2, color = viridis(3, alpha = 0.5)[1]) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c(viridis(3)[1], "darkgrey")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
pdf("plots/Drop_country_within.pdf")
ggplot(data_drop, aes(x = top_10_w, y = factor(country))) +
geom_point(aes(color = significance_w), size = 1) +
geom_errorbarh(aes(xmin = ci_low_w, xmax = ci_up_w), height = 0.2, color = viridis(3, alpha = 0.5)[1]) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c(viridis(3)[1], "darkgrey")) +
labs(x = "Coefficient Value", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
dev.off()
data_drop$country <- factor(data_drop$country, levels = data_drop$country[order(data_drop$top_10_b, decreasing = TRUE)])
# Create the plot
pdf("plots/Drop_country_between.pdf")
ggplot(data_drop, aes(x = top_10_b, y = factor(country))) +
geom_errorbarh(aes(xmin = ci_low_b, xmax = ci_up_b), height = 0.2, color = "grey") +
geom_point(aes(color = significance_b), size = 1) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c("darkgrey", viridis(3)[2])) +
labs(x = "Coefficient Top 10%-Share (Between)", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
dev.off()
# Sort the data frame by coefficient
data_drop$country <- factor(data_drop$country, levels = data_drop$country[order(data_drop$top_10_w, decreasing = TRUE)])
# Create the plot
pdf("plots/Drop_country_within.pdf")
ggplot(data_drop, aes(x = top_10_w, y = factor(country))) +
geom_point(aes(color = significance_w), size = 1) +
geom_errorbarh(aes(xmin = ci_low_w, xmax = ci_up_w), height = 0.2, color = viridis(3, alpha = 0.5)[1]) +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = c(viridis(3)[1], "darkgrey")) +
labs(x = "Coefficient Top 10%-Share (Within)", y = "Dropped Country") +
theme_classic() +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10))
dev.off()
## clean environment
rm(list = ls())
# Define which packages needed for analyses
p_needed <-
c("knitr",
"dplyr",
"stargazer",
"ggplot2",
"viridis",
"haven",
"MASS",
"modelsummary",
"haven",
"WDI",
"tidyr",
"devtools",
"data.table",
"sjPlot",
"interplot",
"fastDummies",
"geojsonio",
"sf",
"spdep",
"gstat",
"mapview",
"nngeo",
"rnaturalearth",
"nomisr",
"osmdata",
"tidyr",
"texreg",
"downlit",
"xml2",
"tmap", "tmaptools", "viridisLite",
"ggthemes", "rmapshaper",
"spatialreg",
"plm", "splm", "SDPDmod", "GWmodel")
# Check which packages are already installed on your computer
packages <- rownames(installed.packages())
# Check which packages are not installed
p_to_install <- p_needed[!(p_needed %in% packages)]
if (length(p_to_install) > 0) {
install.packages(p_to_install)
}
sapply(p_needed, require, character.only = TRUE)
# Set an option for the final document that can be produced from the .Rmd file.
knitr::opts_chunk$set(echo = TRUE)
## For replicability: session information
session_info <- print(sessionInfo())
ind <- read.csv2("India/India.csv",
header = T, dec = ".", sep = ",")
## GEOJSON
ind_geojson <- geojson_sf("India/IND_ADM4.geojson")
## Combine
ind_complete <- left_join(ind_geojson, ind, by = "shapeID")
## Filter for Delhi
delhi <- ind_complete[which(ind_complete$shapeName.x %like% "Delhi"),]
#-------------------------------------------------------------------------------
# Plot
#-------------------------------------------------------------------------------
## Plot PM2.5 over year
plot(ind_complete[,c("surface_pm25_monthly_v5gl03.202101.mean",
"surface_pm25_monthly_v5gl03.202102.mean",
"surface_pm25_monthly_v5gl03.202103.mean",
"surface_pm25_monthly_v5gl03.202104.mean",
"surface_pm25_monthly_v5gl03.202105.mean",
"surface_pm25_monthly_v5gl03.202106.mean",
"surface_pm25_monthly_v5gl03.202107.mean",
"surface_pm25_monthly_v5gl03.202108.mean",
"surface_pm25_monthly_v5gl03.202109.mean",
"surface_pm25_monthly_v5gl03.202110.mean",
"surface_pm25_monthly_v5gl03.202111.mean",
"surface_pm25_monthly_v5gl03.202112.mean"
)],
max.plot = 12)
#-------------------------------------------------------------------------------
## Delhi
#-------------------------------------------------------------------------------
delhi_no_geo <- st_drop_geometry(delhi[1,
c("surface_pm25_monthly_v5gl03.202101.mean",
"surface_pm25_monthly_v5gl03.202102.mean",
"surface_pm25_monthly_v5gl03.202103.mean",
"surface_pm25_monthly_v5gl03.202104.mean",
"surface_pm25_monthly_v5gl03.202105.mean",
"surface_pm25_monthly_v5gl03.202106.mean",
"surface_pm25_monthly_v5gl03.202107.mean",
"surface_pm25_monthly_v5gl03.202108.mean",
"surface_pm25_monthly_v5gl03.202109.mean",
"surface_pm25_monthly_v5gl03.202110.mean",
"surface_pm25_monthly_v5gl03.202111.mean",
"surface_pm25_monthly_v5gl03.202112.mean"
)])
plot(c(1:12),
delhi_no_geo[1,],
bty = "n",
xlim = c(1, 12.5),
ylim = c(0, 305),
xlab = "Time [Months]",
ylab = expression("PM"[2.5]*" ["*mu~"g/m"^3*"]"),
pch = 19,
cex = 1.2,
col = viridis(3, alpha = 1)[1],
main = "Air Pollution in Delhi in 2021")
View(delhi)
sa <- read.csv2("South Africa/64afda4950b76c3b9b475c22_results.csv",
header = T, dec = ".", sep = ",")
sa2 <- read.csv2("South Africa/SA2/64afea9eedec822e9034c292_results.csv",
header = T, dec = ".", sep = ",")
sa <- left_join(sa, sa2, by = c("asdf_id", "shapeID"))
## South Africa - GEOJSON
sa_geojson <- geojson_sf("South Africa/ZAF_ADM4.geojson")
## Combine
sa_complete <- left_join(sa_geojson, sa, by = "shapeID")
## Filter for JoBurg
jburg <- sa_complete[which(sa_complete$shapeName %like% "Johannesburg"),]
