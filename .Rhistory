means_wealth[which(means_wealth$x == "NaN"),] <- NA
means_inequ_b50[which(means_inequ_b50$x == "NaN"),] <- NA
means_inequ_t1[which(means_inequ_t1$x == "NaN"),] <- NA
means_inequ_t10b50[which(means_inequ_t10b50$x == "NaN"),] <- NA
means_winning[which(means_winning$x == "NaN"),] <- NA
means_polity[which(means_polity$x == "NaN"),] <- NA
means_income[which(means_income$x == "NaN"),] <- NA
means_income_sq[which(means_income_sq$x == "NaN"),] <- NA
means_trade[which(means_trade$x == "NaN"),] <- NA
means_cpi[which(means_cpi$x == "NaN"),] <- NA
means_pop[which(means_pop$x == "NaN"),] <- NA
means_urban[which(means_urban$x == "NaN"),] <- NA
means_industrial[which(means_industrial$x == "NaN"),] <- NA
## rename
names(means_inequ) <- c("country", "mean")
names(means_wealth) <- c("country", "mean")
names(means_inequ_b50) <- c("country", "mean")
names(means_inequ_t1) <- c("country", "mean")
names(means_inequ_t10b50) <- c("country", "mean")
names(means_winning) <- c("country", "mean")
names(means_polity) <- c("country", "mean")
names(means_income) <- c("country", "mean")
names(means_income_sq) <- c("country", "mean")
names(means_trade) <- c("country", "mean")
names(means_cpi) <- c("country", "mean")
names(means_pop) <- c("country", "mean")
names(means_urban) <- c("country", "mean")
names(means_industrial) <- c("country", "mean")
## put them back into the data frame
data$mean_inequ <- means_inequ$mean[match(data$country, means_inequ$country)]
data$mean_wealth <- means_wealth$mean[match(data$country, means_wealth$country)]
data$mean_inequ_b50 <- means_inequ_b50$mean[match(data$country, means_inequ_b50$country)]
data$mean_inequ_t1 <- means_inequ_t1$mean[match(data$country, means_inequ_t1$country)]
data$mean_inequ_t10b50 <- means_inequ_t10b50$mean[match(data$country, means_inequ_t10b50$country)]
data$mean_winning <- means_winning$mean[match(data$country, means_winning$country)]
data$mean_polity <- means_polity$mean[match(data$country, means_polity$country)]
data$mean_income <- means_income$mean[match(data$country, means_income$country)]
data$mean_income_sq <- means_income_sq$mean[match(data$country, means_income_sq$country)]
data$mean_trade <- means_trade$mean[match(data$country, means_trade$country)]
data$mean_cpi <- means_cpi$mean[match(data$country, means_cpi$country)]
data$mean_pop <- means_pop$mean[match(data$country, means_pop$country)]
data$mean_urban <- means_urban$mean[match(data$country, means_urban$country)]
data$mean_industrial <- means_industrial$mean[match(data$country, means_industrial$country)]
## calculate de-meaned variable:
data$demeaned_inequ <- data$top10 - data$mean_inequ
data$demeaned_wealth <- data$wealth_top10 - data$mean_wealth
data$demeaned_inequ_b50 <- data$bottom50 - data$mean_inequ_b50
data$demeaned_inequ_t1 <- data$top1 - data$mean_inequ_t1
data$demeaned_inequ_t10b50 <- data$t10b50ratio - data$mean_inequ_t10b50
data$demeaned_winning <- data$W4 - data$mean_winning
data$demeaned_polity <- data$v2x_polyarchy - data$mean_polity
data$demeaned_income <- data$`2_gdp_pc_log` - data$mean_income
data$demeaned_income_sq <- data$`2_gdp_pc_log_sq` - data$mean_income_sq
data$demeaned_trade <- data$trade_openness - data$mean_trade
data$demeaned_cpi <- data$cpi - data$mean_cpi
data$demeaned_pop <- data$pop_dens_log - data$mean_pop
data$demeaned_urban <- data$urban_pop - data$mean_urban
data$demeaned_industrial <- data$industry_share - data$mean_industrial
#-------------------------------------------------------------------------------
# Subset data (no NA)
#-------------------------------------------------------------------------------
## Select relevant variables
data <- dplyr::select(data, country, year, PM25_pop_weighed, lead_PM25, lead_log_PM25,
top10, bottom50, top1, t10b50ratio, wealth_bottom50, wealth_top10, wealth_top1, wealth_t10b50, gini,
mov_av_gdp, mov_av_gdp_sq, `2_gdp_pc_log`, `2_gdp_pc_log_sq`, `2_gdp_pc_log_cub`,
mean_inequ, mean_wealth, mean_inequ_b50, mean_inequ_t1, mean_inequ_t10b50,
mean_winning, mean_polity, mean_income, mean_income_sq, mean_industrial,
demeaned_inequ, demeaned_wealth, demeaned_inequ_b50, demeaned_inequ_t1, demeaned_inequ_t10b50,
demeaned_winning, demeaned_polity, demeaned_income, demeaned_income_sq, demeaned_industrial,
mean_trade, mean_cpi, mean_pop, mean_urban, demeaned_trade, demeaned_cpi, demeaned_pop, demeaned_urban,
W4, gdp_pc_growth, gdp_sqkm, gdp_pc_sqkm, industry_share, trade_openness,
e_p_polity, v2x_polyarchy, cpi, pop_dens_log, urban_pop, Annual_temp, precip_var,
pref_bottom_50, pref_top_20, ratio, env_prot_eco_grow)
## remove NAs
data_s <- na.omit(data)
length(unique(data$country))   ## 246
length(unique(data_s$country)) ## 128
## -----------------------------------------------------------------------
## Sample training  and test data
## -----------------------------------------------------------------------
## Set seed
set.seed(199610)
data_descript <- data[which(!is.na(data$cpi) &
!is.na(data$trade_openness) &
!is.na(data$pop_dens_log) &
!is.na(data$demeaned_winning) &
!is.na(data$industry_share) &
!is.na(data$top10)),]
## use the package rsample to split our data
split_strata <- initial_split(data_descript,
prop = 0.7,
strata = "PM25_pop_weighed") ## here we make sure that our DV stays balanced
data_train <- training(split_strata)
data_test <- testing(split_strata)
co2 <- read.csv2("data/Air pollution/co2_wb_new.csv",
header = T,
sep = ";",
dec = ".",
stringsAsFactors = F)
colnames(co2)[3:26] <- 1999:2022
## reshape
co2_long <- gather(co2,
year,
co2,
"1999":"2022",
factor_key = TRUE)
co2_long$year <- as.numeric(as.character(co2_long$year))
co2_long$log_co2 <- log(1 + co2_long$co2)  ## plus 1 to avoid negative numbers
# lead log(co2)
co2_long <- co2_long %>%
group_by(country) %>%
arrange(year) %>%
mutate(lead_log_co2 = dplyr::lead(log_co2))
## rename
co2_long$country[which(co2_long$country == "West Bank and Gaza")] <- "Palestina"
co2_long$country[which(co2_long$country == "Yemen, Rep.")] <- "Yemen"
co2_long$country[which(co2_long$country == "Turkiye")] <- "Turkey"
co2_long$country[which(co2_long$country == "Syrian Arab Republic")] <- "Syria"
co2_long$country[which(co2_long$country == "Slovak Republic")] <- "Slovakia"
co2_long$country[which(co2_long$country == "Russian Federation")] <- "Russia"
co2_long$country[which(co2_long$country == "Lao PDR")] <- "Laos"
co2_long$country[which(co2_long$country == "Kyrgyz Republic")] <- "Kyrgyzstan"
co2_long$country[which(co2_long$country == "Korea, Rep.")] <- "South Korea"
co2_long$country[which(co2_long$country == "Korea, Dem. People's Rep.")] <- "North Korea"
co2_long$country[which(co2_long$country == "Iran, Islamic Rep.")] <- "Iran"
co2_long$country[which(co2_long$country == "Hong Kong SAR, China")] <- "Hong Kong"
co2_long$country[which(co2_long$country == "Gambia, The")] <- "Gambia"
co2_long$country[which(co2_long$country == "Egypt, Arab Rep.")] <- "Egypt"
co2_long$country[which(co2_long$country == "Czechia")] <- "Czech Republic"
co2_long$country[which(co2_long$country == "Congo, Dem. Rep.")] <- "Democratic Republic of the Congo"
co2_long$country[which(co2_long$country == "Congo, Rep.")] <- "Republic of Congo"
co2_long$country[which(co2_long$country == "Macao SAR, China")] <- "Macao"
co2_long$country[which(co2_long$country == "Brunei Darussalam")] <- "Brunei"
co2_long$country[which(co2_long$country == "Taiwan Province of China")] <- "Taiwan"
co2_long$country[which(co2_long$country == "St. Kitts and Nevis")] <- "Saint Kitts and Nevis"
co2_long$country[which(co2_long$country == "St. Lucia")] <- "Saint Lucia"
co2_long$country[which(co2_long$country == "St. Vincent and the Grenadines")] <- "Saint Vincent and the Grenadines"
co2_long$country[which(co2_long$country == "North Macedonia")] <- "Macedonia"
co2_long$country[which(co2_long$country == "Eswatini")] <- "Swaziland"
co2_long$country[which(co2_long$country == "Micronesia, Fed. Sts.")] <- "Micronesia"
co2_long$country[which(co2_long$country == "Cabo Verde")] <- "Cape Verde"
co2_long$country[which(co2_long$country == "Bahamas, The")] <- "Bahamas"
co2_long$country[which(co2_long$country == "Virgin Islands (U.S.)")] <- "Virgin Islands U.S."
co2_long$country[which(co2_long$country == "Venezuela, RB")] <- "Venezuela"
co2_long$country[which(co2_long$country == "Yemen, Rep.")] <- "Yemen"
co2_long$country[which(co2_long$country == "Viet Nam")] <- "Vietnam"
# join
data <- left_join(data, co2_long, by = c("country", "year"))
summary(data$co2)
## clean up
remove(co2)
remove(co2_long)
#-------------------------------------------------------------------------------
## Load the data NOx
#-------------------------------------------------------------------------------
nox <- read.csv2("data/Air pollution/nox.csv",
header = T, sep = ";", dec = ".")
-------------------------------------------------------------------------------
# Change format
#-------------------------------------------------------------------------------
nox <- nox[,-c(20:21)]
#-------------------------------------------------------------------------------
## Load the data NOx
#-------------------------------------------------------------------------------
nox <- read.csv2("data/Air pollution/nox.csv",
header = T, sep = ";", dec = ".")
nox <- nox[,-c(20:21)]
colnames(nox)[3:19] <- 1999:2015
nox_long <- gather(nox,
year,
nox,
"1999":"2015",
factor_key = TRUE)
nox_long$year <- as.numeric(as.character(nox_long$year))
-------------------------------------------------------------------------------
# Match
#-------------------------------------------------------------------------------
## country match
country_match <- read.csv2("data/Controls/country_match.csv",
header = T, sep = ";", dec = ".")
nox_long$year <- as.numeric(as.character(nox_long$year))
country_match <- read.csv2("data/Controls/country_match.csv",
header = T, sep = ";", dec = ".")
nox_match <- left_join(country_match, nox_long, by = c("ISO_3DIGIT"))
colnames(nox_match)[1] <- "country"
nox_match <- nox_match[,-3]
# log nox
nox_match$log_nox <- log(1 + nox_match$nox)
# lead log(nox)
nox_match <- nox_match %>%
group_by(country) %>%
arrange(year) %>%
mutate(lead_log_nox = dplyr::lead(log_nox))
# join to prior data
data <- left_join(data, nox_match, by = c("country", "year"))
# clean up
remove(nox)
remove(nox_long)
remove(nox_match)
#-------------------------------------------------------------------------------
## Load the data SO2
#-------------------------------------------------------------------------------
so2 <- read.csv2("data/Air pollution/so2.csv",
header = T, sep = ";", dec = ".")
View(so2)
#-------------------------------------------------------------------------------
# Change format
#-------------------------------------------------------------------------------
colnames(so2)[3:22] <- 1999:2018
## reshape
so2_long <- gather(so2,
year,
so2,
"1999":"2018",
factor_key = TRUE)
so2_long$year <- as.numeric(as.character(so2_long$year))
so2_match <- left_join(country_match, so2_long, by = c("ISO_3DIGIT"))
colnames(so2_match)[1] <- "country"
# log so2
so2_match$log_so2 <- log(1 + so2_match$so2)
# lead log(so2)
so2_match <- so2_match %>%
group_by(country) %>%
arrange(year) %>%
mutate(lead_log_so2 = dplyr::lead(log_so2))
# join to prior data
data <- left_join(data, so2_match, by = c("country", "year"))
# clean up
remove(so2)
remove(so2_long)
remove(so2_match)
data <- dplyr::select(data, country, year, PM25_pop_weighed, lead_PM25, lead_log_PM25,
top10, bottom50, top1, t10b50ratio, wealth_bottom50, wealth_top10, wealth_top1, wealth_t10b50, gini,
mov_av_gdp, mov_av_gdp_sq, `2_gdp_pc_log`, `2_gdp_pc_log_sq`, `2_gdp_pc_log_cub`,
mean_inequ, mean_wealth, mean_inequ_b50, mean_inequ_t1, mean_inequ_t10b50,
mean_winning, mean_polity, mean_income, mean_income_sq, mean_industrial,
demeaned_inequ, demeaned_wealth, demeaned_inequ_b50, demeaned_inequ_t1, demeaned_inequ_t10b50,
demeaned_winning, demeaned_polity, demeaned_income, demeaned_income_sq, demeaned_industrial,
mean_trade, mean_cpi, mean_pop, mean_urban, demeaned_trade, demeaned_cpi, demeaned_pop, demeaned_urban,
W4, gdp_pc_growth, gdp_sqkm, gdp_pc_sqkm, industry_share, trade_openness,
e_p_polity, v2x_polyarchy, cpi, pop_dens_log, urban_pop, Annual_temp, precip_var,
co2, log_co2, lead_log_co2,
nox, log_nox, lead_log_nox,
so2, log_so2, lead_log_so2,
pref_bottom_50, pref_top_20, ratio, env_prot_eco_grow)
save(data, file = "data/data.RData")
save(data_s, file = "data/data_s.RData")
save(data_train, file = "data/data_train.RData")
save(data_test, file = "data/data_test.RData")
## clean environment
rm(list = ls())
## clean environment
rm(list = ls())
# Define which packages needed for analyses
p_needed <-
c("knitr",
"dplyr",
"stargazer",
"car",
"ggplot2",
"viridis",
"rsample",
"MASS",
"lme4",
"devtools",
"haven",
"modelsummary",
"ggmap",
"maps",
"data.table",
"texreg",
"fastDummies",
"margins")
# Check which packages are already installed on your computer
packages <- rownames(installed.packages())
# Check which packages are not installed
p_to_install <- p_needed[!(p_needed %in% packages)]
if (length(p_to_install) > 0) {
utils::install.packages(p_to_install)
}
sapply(p_needed, require, character.only = TRUE)
# Set an option for the final document that can be produced from the .Rmd file.
knitr::opts_chunk$set(echo = TRUE)
## For replicability: session information
session_info <- print(sessionInfo())
#-------------------------------------------------------------------------------
## Load the data
#-------------------------------------------------------------------------------
load("data/data.RData")
load("data/data_s.RData")
## group countries
countries_low_income <- c("Afghanistan", "Burkina Faso", "Burundi", "Central African Republic",
"Chad", "Democratic Republic of the Congo", "Eritrea", "Ethiopia",
"Gambia", "Guinea", "Guinea-Bissau", "North Korea", "Liberia", "Madagascar", "Malawi",
"Mali", "Mozambique", "Niger", "Rwanda", "Sierra Leone", "Somalia",
"South Sudan", "Sudan", "Syria", "Togo", "Uganda", "Yemen", "Zambia")
countries_low_mid_income <- c("Algeria", "Angola", "Bangladesh", "Benin", "Bhutan", "Bolivia",
"Benin", "Cape Verde", "Cambodia", "Cameroon", "Comoros",
"Republic of Congo", "Cote d'Ivoire", "Djibouti", "Egypt", "El Salvador",
"Swaziland", "Ghana", "Haiti", "Honduras", "India", "Indonesia",
"Iran", "Kenya", "Kiribati", "Kyrgyztan", "Laos", "Lebanon",
"Lesotho", "Mauritania", "Micronesia", "Mongolia", "Morocco",
"Myanmar", "Nepal", "Nicaragua", "Nigeria", "Pakistan",
"Papua New Guinea", "Philippines", "Samoa", "Sao Tome and Principe",
"Senegal", "Solomon Islands", "Sri Lanka", "Tajikistan", "Tanzania",
"Timor-Leste", "Tunisia", "Ukraine", "Uzbekistan", "Vanuatu",
"Vietnam", "Palestina", "Zimbabwe")
countries_up_mid_income <- c("Albania", "Armenia", "American Samoa", "Argentina", "Azerbaijan",
"Belarus", "Belize", "Bosnia and Herzegovina", "Botswana",
"Brazil", "Bulgaria", "China", "Colombia", "Costa Rica", "Cuba",
"Dominica", "Dominican Republic", "Ecuador", "Equatorial Guinea",
"Fiji", "Gabon", "Georgia", "Grenada", "Guatemala", "Guyana",
"Iraq", "Jamaica", "Jordan", "Kazakhstan", "Kosovo", "Libya",
"Malaysia", "Maldives", "Marshall Islands", "Mauritius", "Mexico",
"Moldova", "Montenegro", "Namibia", "North Macedonia", "Palau",
"Paraguay", "Peru", "Russia", "Serbia", "South Africa", "St. Lucia",
"Saint Vincent and the Grenadines", "Suriname", "Thailand", "Tonga",
"Turkey", "Turkmenistan", "Tuvalu", "Venezuela")
countries_high_income <- c("Andorra", "Antigua and Barbuda", "Aruba", "Australia", "Austria",
"Bahamas", "Bahrain", "Barbados", "Belgium", "Bermuda", "British Virgin Islands",
"Brunei", "Canada", "Cayman Islands", "Channel Islands", "Chile", "Croatia",
"Curacao", "Cyprus", "Czech Republic", "Denmark", "Estonia", "Faroe Islands", "Finland",
"France", "French Polynesia", "Germany", "Gibraltar", "Greece", "Greenland",
"Guam", "Hong Kong", "Hungary", "Iceland", "Ireland", "Isle of Man", "Israel",
"Italy", "Japan", "Korea, Rep.", "Kuwait", "Latvia", "Liechtenstein",
"Lithuania", "Luxembourg", "Macao", "Malta", "Monaco", "Nauru", "Netherlands",
"New Caledonia", "New Zealand", "Northern Mariana Islands", "Norway", "Oman",
"Panama", "Poland", "Portugal", "Puerto Rico", "Qatar", "Romania", "San Marino",
"Saudi Arabia", "Seychelles", "Singapore", "Sint Marteen", "Slovakia", "Slovenia",
"Spain", "Saint Kitts and Nevis", "Saint Martin", "Sweden", "Switzerland",
"Trinidad and Tobago", "Turks and Caicos Islands", "United Arab Emirates",
"United Kingdom", "United States", "Uruguay", "Virgin Islands U.S.")
## load world map data
world <- map_data("world")
world$region[which(world$region == "USA")] <- "United States"
world$region[which(world$region == "UK")] <- "United Kingdom"
world$region[which(world$region == "Ivory Coast")] <- "Cote d'Ivoire"
#-------------------------------------------------------------------------------
## Get data set that corresponds to that used in regressions
#-------------------------------------------------------------------------------
data_descript <- data[which(!is.na(data$cpi) &
!is.na(data$trade_openness) &
!is.na(data$pop_dens_log) &
!is.na(data$demeaned_winning) &
!is.na(data$industry_share) &
!is.na(data$top10)),]
#-------------------------------------------------------------------------------
## Summary stats
#-------------------------------------------------------------------------------
# options("modelsummary_format_numeric_latex" = "plain")
#
# datasummary(formula = (`PM$_2.5$ (orig. scale)` = PM25_pop_weighed) + (`PM$_2.5$ (log scale)` = lead_log_PM25) +
#                       (`Top 10%-share` = top10) + (`Top 1%-share` = top1) + (`Bottom 50%-share` = bottom50) +
#                       (`T10/B50-ratio` = t10b50ratio) + (`log(GDP per capita)$^2$` = `2_gdp_pc_log`) +
#                       (`W/S-ratio` = W4) + (`Trade openness` = trade_openness) + (`Corruption`= cpi) +
#                       (`Industry (% GDP)` = industry_share) + (`log(Pop. density)`= pop_dens_log) + (`Year`= year) +
#                       (`Polyarchy`= v2x_polyarchy)  + (`GDP per cap. growth` = gdp_pc_growth) +
#                       (`GDP per cap/km$^2$`= gdp_pc_sqkm) + (`Average temp.`= Annual_temp) +
#                       (`Precip. variab.` = precip_var) + (`Urban pop. (%)` = urban_pop)
#                       ~ N + Mean + SD + Min + Median + Max,
#             data = data_descript,
#             output = "latex")
#-------------------------------------------------------------------------------
## Differentiate inequality increasing / decreasing countries over time
#-------------------------------------------------------------------------------
## create lead variable
data_trend <- data %>%
group_by(country) %>%
arrange(year)%>%
mutate(lead_top10 = dplyr::lead(top10),
lead_PM25 = dplyr::lead(PM25_pop_weighed))
## name columns
data_trend <- data_trend[,c("country", "year", "top10", "lead_top10",
"PM25_pop_weighed", "lead_PM25")]
## add inequality trend column
data_trend$trend_ineq <- NA
## get variable that indicates increase vs. decrease in t+1 compared to t
for(i in 1:nrow(data_trend)){
data_trend$trend_ineq[i] <- ifelse((!is.na(data_trend$lead_top10[i]) & !is.na(data_trend$top10[i])),    # if both top10 and lead top10 not NA
(data_trend$lead_top10[i] - data_trend$top10[i]), NA)                # insert diff between them
}
## get overall trend (more increasing vs. more decreasing years)
summary_trend_ineq <- data_trend %>%
group_by(country) %>%
summarize(sum_trend_ineq = ifelse(all(is.na(trend_ineq)), NA, sum(trend_ineq, na.rm = TRUE)),
var_trend_ineq = ifelse(all(is.na(trend_ineq)), NA, var(trend_ineq, na.rm = TRUE)))
## colnames
colnames(summary_trend_ineq)[1:3] <- c("country", "trend_ineq", "var_trend_ineq")
## combine
data <- left_join(data, summary_trend_ineq, by = "country")
summary(data$trend_ineq)
summary(data$var_trend_ineq)
## clean up
remove(data_trend)
#-------------------------------------------------------------------------------
# Plot trend variable
#-------------------------------------------------------------------------------
min_diff <- round(min(data$trend_ineq, na.rm = TRUE), digits = 2)
max_diff <- round(max(data$trend_ineq, na.rm = TRUE), digits = 2)
pdf("plots/Trend_inequality.pdf")
ggplot(data[which(!is.na(data$trend_ineq)),],
aes(x = reorder(country, trend_ineq), y = trend_ineq, fill = trend_ineq >= 0)) +
theme_classic() +
geom_bar(stat = "identity") +
labs(y = "Change in Top 10%-share", x = "Countries") +
scale_fill_manual(name = NULL,
breaks = c("TRUE", "FALSE"),
labels = c("Increase", "Decrease"),
values = c(viridis(3)[2],
viridis(3)[1])) +
theme(axis.text.x = element_blank(),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.ticks.x = element_blank(),
axis.title = element_text(size = 12),
legend.position = "bottom",
legend.text = element_text(size = 10)) +
annotate("text", x = 168, y = 3.7, label = "Max (India) \n+0.17", size = 3.2) +
annotate("text", x = 10, y = -4, label = "Min (Maldives) \n-0.18", size = 3.2) +
coord_flip()
dev.off()
#-------------------------------------------------------------------------------
# Plot variation
#-------------------------------------------------------------------------------
pdf("plots/Trend_inequality_var.pdf")
ggplot(data[which(!is.na(data$var_trend_ineq)),],
aes(x = reorder(country, var_trend_ineq), y = var_trend_ineq, fill = var_trend_ineq)) +
theme_classic() +
geom_bar(stat = "identity") +
labs(y = "Variance of Top 10%-share", x = "Countries") +
scale_fill_gradient(low = viridis(1, alpha = 0.5),
high = viridis(1, alpha = 1),
na.value = "grey50",
guide = "colourbar",
aesthetics = "fill") +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 3),
axis.ticks.y = element_blank(),
axis.title = element_text(size = 12),
legend.position = "none",
legend.text = element_text(size = 10)) +
annotate("text", x = 172, y = 0.026, label = "Max (Singapore)", size = 3.2) +
coord_flip()
dev.off()
m4_re_wb <- lmer(lead_log_PM25 ~ mean_inequ + demeaned_inequ +
demeaned_income + demeaned_income_sq + demeaned_winning +
demeaned_trade + demeaned_cpi + demeaned_industrial + demeaned_pop +
mean_income + mean_income_sq + mean_winning +
mean_trade + mean_cpi + mean_industrial + mean_pop + year +
(1 | country),
data = data_descript)
m4_re_wb_co2 <- lmer(lead_log_co2 ~ mean_inequ + demeaned_inequ +
demeaned_income + demeaned_income_sq + demeaned_winning +
demeaned_trade + demeaned_cpi + demeaned_industrial + demeaned_pop +
mean_income + mean_income_sq + mean_winning +
mean_trade + mean_cpi + mean_industrial + mean_pop + year +
(1 | country),
data = data_descript)
#-------------------------------------------------------------------------------
# NO2
#-------------------------------------------------------------------------------
m4_re_wb_nox <- lmer(lead_log_nox ~ mean_inequ + demeaned_inequ +
demeaned_income + demeaned_income_sq + demeaned_winning +
demeaned_trade + demeaned_cpi + demeaned_industrial + demeaned_pop +
mean_income + mean_income_sq + mean_winning +
mean_trade + mean_cpi + mean_industrial + mean_pop + year +
(1 | country),
data = data_descript)
#-------------------------------------------------------------------------------
# SO2
#-------------------------------------------------------------------------------
m4_re_wb_so2 <- lmer(lead_log_so2 ~ mean_inequ + demeaned_inequ +
demeaned_income + demeaned_income_sq + demeaned_winning +
demeaned_trade + demeaned_cpi + demeaned_industrial + demeaned_pop +
mean_income + mean_income_sq + mean_winning +
mean_trade + mean_cpi + mean_industrial + mean_pop + year +
(1 | country),
data = data_descript)
## Table Alternative Models
texreg(list(m4_re_wb, m4_re_wb_co2, m4_re_wb_so2, m4_re_wb_nox),
stars = c(0.01, 0.05, 0.1),
caption = "Alternative Measures for Air Pollution",
label = "tab:pollutants",
caption.above = T,
custom.model.names = c("$PM_{2.5}$", "$CO_{2}$", "$SO_{2}$", "$NO_{x}$"),
fontsize = "scriptsize",
groups = list("Controls (Within)" = 9:12,
"Controls (Between)" = 13:16),
custom.coef.map = list("demeaned_inequ" = "Top 10%-share (Within)",
"mean_inequ" = "Top 10%-share (Between)",
"demeaned_income" = "log(GDP per capita) (Within)",
"demeaned_income_sq" = "log(GDP per capita)$^2$ (Within)",
"mean_income" = "log(GDP per capita) (Between)",
"mean_income_sq" = "log(GDP per capita)$^2$ (Between)",
"demeaned_winning" = "Democracy (Within)",
"mean_winning" = "Democracy (Between)",
"demeaned_trade" = "Trade openness",
"demeaned_cpi" = "Corruption",
"demeaned_industrial" = "Industry (% GDP)",
"demeaned_pop" = "log(Pop. density)",
"mean_trade" = "Trade openness.",
"mean_cpi" = "Corruption.",
"mean_industrial" = "Industry (% GDP).",
"mean_pop" = "log(Pop. density).",
"year" = "Year", "(Intercept)" = "Intercept"),
custom.gof.names = c("AIC",
"BIC",
"Log Likelihood",
"N",
"N(Countries)",
"Var: Countries (Intercept)",
"Var: Residual"))
